syntax = "proto3";

  



package message;


/*
  Command is used from client to proxy and from proxy to client only. When a client sends a Command message to a proxy,
  the message carries one or more client requests/commands/proposals to be appended to the replicated log. The SvrSeq
  field is not used. When a proxy sends a Command message to a connected client, the message carries the agreed proposal
  and the slot number in the SvrSeq field.

  If the client batch size = 1, a valid Command object looks like:
  Command{CliId: 0, CliSeq: 1000, SvrSeq: 0, Commands: ["0key1val1"]}

  If the client batch size = 3, a valid Command object looks like:
  Command{CliId: 0, CliSeq: 1001, SvrSeq: 0, Commands: ["0key1val1", "0key2val2", "1key3"]}

  CliId:  the from/to client id
  CliSeq: the client sequence
  SvrSeq: the decided slot # (from proxy to client only)
  Commands:
      each command in the array looks is of the form <operation type><key>[<value>], e.g., 0key1val1 and 1key2 are
      both valid. Regarding the operation type, 0 stands for a write operation and 1 stands for a read operation.

  Each command is a string of 17 bytes (modifiable through Conf.KeyLen and Conf.ValLen)
    [0:1]   (1 byte): "0" == a write operation,  "1" == a read operation
    [1:9]  (8 bytes): a string Key
    [9:17] (8 bytes): a string Value
 */
message Command {
  uint32 CliId = 1;
  uint32 CliSeq = 2;
  uint32 SvrSeq = 3;
  repeated string Commands = 4;
}

/*
  To pass around a ConsensusObj among layers, embed it as a field of a Msg object because then we only need to keep Msg
  channels for inter-layer communications.

  If the client batch size = 1 and the proxy batch size = 1, valid ConsensusObj objects look like:
  ConsensusObj {ProId: 4, ProSeq: 500, SvrSeq: 714, IsNull: true}
  ConsensusObj {ProId: 4, ProSeq: 500, SvrSeq: 714, IsNull: false, CliIds: [0], CliSeqs: [1000],
    Commands: ["0key1val1"]}

  If the client batch size = 2 and the proxy batch size = 5, valid ConsensusObj object looks like:
  ConsensusObj {ProId: 4, ProSeq: 500, SvrSeq: 714, IsNull: false, CliIds: [0, 0, 0, 0, 0],
    CliSeqs: [1000, 1001, 1002, 1003, 1004], Commands: ["0k1v1", "1k2", "0k3v3",
    "1k4", "0k5v5", "1k6", "0k7v7", "1k8", "0k9v9", "1k10"]}

  ConsensusObj {ProId: 4, ProSeq: 500, SvrSeq: 119, IsNull: false, CliIds: [0, 0, 0, 1, 1],
    CliSeqs: [1000, 1001, 1002, 999, 1000], Commands: ["0k1v1", "1k2", "0k3v3",
    "1k4", "0k5v5", "1k6", "0k1v1", "1k2", "0k3v3", "1k4"]}

  ProId:    the id of the proxy that initiates this object
  ProSeq:   the sequence of this object
  SvrSeq:   the decision slot number (0 could mean unassigned / decision in process)
  IsNull:   true if this slot is a NULL slot. if false, the following fields are used, see valid formats above
  CliIds:   the client id's that are associated with commands
  CliSeqs:  the client sequences that are associated with commands
  Commands: the clients' commands
 */
message ConsensusObj {
  uint32 ProId = 1;
  uint32 ProSeq = 2;
  uint32 SvrSeq = 3;
  bool IsNull = 4;
  repeated uint32 CliIds = 5;
  repeated uint32 CliSeqs = 6;
  repeated string Commands = 7;
}

/*
  ClientRequest:
    from proxy to network, among networks

  Proposal, State, Vote, ProposalRequest, ProposalReply, and Decision:
    from consensus to network, among networks, from network to consensus

  ProposalRequest:
    Phase: SvrId (the source server's id), Value: the sequence number of the proposal
    from Executor to the local network layer then to another network layer (based on message.Value?)

  ProposalReply:
    Phase: the destination server's id, Value: the sequence number of the proposal
    from MsgHandler to the local network layer then to another network layer (based on message.Phase)
 */
enum MsgType {
  ClientRequest = 0;
  Proposal = 1;
  State = 2;
  Vote = 3;
  ProposalRequest = 4;
  ProposalReply = 5;
  Decision = 6;
}

/*
  A Msg object can be passed around without a embedded ConsensusObj -- simply let that field be null


   Type: one of the message types listed above
   Phase:  the phase of the message
   Value: reserved for special occasions, see below
   Obj: a pointer to a consensus object, could be null for binary consensus messages and other cases

  The usages of the Value field:
    State, and Vote messages: my binary consensus message of phase P round R
    ProposalRequest and ProposalReply: the sequence number of the proposal
    for internal communications between executor and messageHandler, see binConMsgHandling()

 */
message Msg {
  MsgType Type = 1;
  uint32 Phase = 2;
  uint32 Value = 3;
  ConsensusObj Obj = 4;
}
