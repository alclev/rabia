// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#include "message.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace message {
PROTOBUF_CONSTEXPR Command::Command(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.commands_)*/{}
  , /*decltype(_impl_.cliid_)*/0u
  , /*decltype(_impl_.cliseq_)*/0u
  , /*decltype(_impl_.svrseq_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CommandDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandDefaultTypeInternal() {}
  union {
    Command _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandDefaultTypeInternal _Command_default_instance_;
PROTOBUF_CONSTEXPR ConsensusObj::ConsensusObj(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.cliids_)*/{}
  , /*decltype(_impl_._cliids_cached_byte_size_)*/{0}
  , /*decltype(_impl_.cliseqs_)*/{}
  , /*decltype(_impl_._cliseqs_cached_byte_size_)*/{0}
  , /*decltype(_impl_.commands_)*/{}
  , /*decltype(_impl_.proid_)*/0u
  , /*decltype(_impl_.proseq_)*/0u
  , /*decltype(_impl_.svrseq_)*/0u
  , /*decltype(_impl_.isnull_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ConsensusObjDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConsensusObjDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConsensusObjDefaultTypeInternal() {}
  union {
    ConsensusObj _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConsensusObjDefaultTypeInternal _ConsensusObj_default_instance_;
PROTOBUF_CONSTEXPR Msg::Msg(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.obj_)*/nullptr
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.phase_)*/0u
  , /*decltype(_impl_.value_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MsgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgDefaultTypeInternal() {}
  union {
    Msg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgDefaultTypeInternal _Msg_default_instance_;
}  // namespace message
static ::_pb::Metadata file_level_metadata_message_2eproto[3];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_message_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_message_2eproto = nullptr;

const uint32_t TableStruct_message_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::Command, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::Command, _impl_.cliid_),
  PROTOBUF_FIELD_OFFSET(::message::Command, _impl_.cliseq_),
  PROTOBUF_FIELD_OFFSET(::message::Command, _impl_.svrseq_),
  PROTOBUF_FIELD_OFFSET(::message::Command, _impl_.commands_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::ConsensusObj, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::ConsensusObj, _impl_.proid_),
  PROTOBUF_FIELD_OFFSET(::message::ConsensusObj, _impl_.proseq_),
  PROTOBUF_FIELD_OFFSET(::message::ConsensusObj, _impl_.svrseq_),
  PROTOBUF_FIELD_OFFSET(::message::ConsensusObj, _impl_.isnull_),
  PROTOBUF_FIELD_OFFSET(::message::ConsensusObj, _impl_.cliids_),
  PROTOBUF_FIELD_OFFSET(::message::ConsensusObj, _impl_.cliseqs_),
  PROTOBUF_FIELD_OFFSET(::message::ConsensusObj, _impl_.commands_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::Msg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::Msg, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::message::Msg, _impl_.phase_),
  PROTOBUF_FIELD_OFFSET(::message::Msg, _impl_.value_),
  PROTOBUF_FIELD_OFFSET(::message::Msg, _impl_.obj_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::message::Command)},
  { 10, -1, -1, sizeof(::message::ConsensusObj)},
  { 23, -1, -1, sizeof(::message::Msg)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::message::_Command_default_instance_._instance,
  &::message::_ConsensusObj_default_instance_._instance,
  &::message::_Msg_default_instance_._instance,
};

const char descriptor_table_protodef_message_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rmessage.proto\022\007message\"J\n\007Command\022\r\n\005C"
  "liId\030\001 \001(\r\022\016\n\006CliSeq\030\002 \001(\r\022\016\n\006SvrSeq\030\003 \001"
  "(\r\022\020\n\010Commands\030\004 \003(\t\"\200\001\n\014ConsensusObj\022\r\n"
  "\005ProId\030\001 \001(\r\022\016\n\006ProSeq\030\002 \001(\r\022\016\n\006SvrSeq\030\003"
  " \001(\r\022\016\n\006IsNull\030\004 \001(\010\022\016\n\006CliIds\030\005 \003(\r\022\017\n\007"
  "CliSeqs\030\006 \003(\r\022\020\n\010Commands\030\007 \003(\t\"g\n\003Msg\022\036"
  "\n\004Type\030\001 \001(\0162\020.message.MsgType\022\r\n\005Phase\030"
  "\002 \001(\r\022\r\n\005Value\030\003 \001(\r\022\"\n\003Obj\030\004 \001(\0132\025.mess"
  "age.ConsensusObj*u\n\007MsgType\022\021\n\rClientReq"
  "uest\020\000\022\014\n\010Proposal\020\001\022\t\n\005State\020\002\022\010\n\004Vote\020"
  "\003\022\023\n\017ProposalRequest\020\004\022\021\n\rProposalReply\020"
  "\005\022\014\n\010Decision\020\006b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_message_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_message_2eproto = {
    false, false, 463, descriptor_table_protodef_message_2eproto,
    "message.proto",
    &descriptor_table_message_2eproto_once, nullptr, 0, 3,
    schemas, file_default_instances, TableStruct_message_2eproto::offsets,
    file_level_metadata_message_2eproto, file_level_enum_descriptors_message_2eproto,
    file_level_service_descriptors_message_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_message_2eproto_getter() {
  return &descriptor_table_message_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_message_2eproto(&descriptor_table_message_2eproto);
namespace message {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MsgType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_message_2eproto);
  return file_level_enum_descriptors_message_2eproto[0];
}
bool MsgType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Command::_Internal {
 public:
};

Command::Command(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.Command)
}
Command::Command(const Command& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Command* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.commands_){from._impl_.commands_}
    , decltype(_impl_.cliid_){}
    , decltype(_impl_.cliseq_){}
    , decltype(_impl_.svrseq_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.cliid_, &from._impl_.cliid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.svrseq_) -
    reinterpret_cast<char*>(&_impl_.cliid_)) + sizeof(_impl_.svrseq_));
  // @@protoc_insertion_point(copy_constructor:message.Command)
}

inline void Command::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.commands_){arena}
    , decltype(_impl_.cliid_){0u}
    , decltype(_impl_.cliseq_){0u}
    , decltype(_impl_.svrseq_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Command::~Command() {
  // @@protoc_insertion_point(destructor:message.Command)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Command::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.commands_.~RepeatedPtrField();
}

void Command::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Command::Clear() {
// @@protoc_insertion_point(message_clear_start:message.Command)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.commands_.Clear();
  ::memset(&_impl_.cliid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.svrseq_) -
      reinterpret_cast<char*>(&_impl_.cliid_)) + sizeof(_impl_.svrseq_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Command::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 CliId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.cliid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 CliSeq = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.cliseq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 SvrSeq = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.svrseq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string Commands = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_commands();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "message.Command.Commands"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Command::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.Command)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 CliId = 1;
  if (this->_internal_cliid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_cliid(), target);
  }

  // uint32 CliSeq = 2;
  if (this->_internal_cliseq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_cliseq(), target);
  }

  // uint32 SvrSeq = 3;
  if (this->_internal_svrseq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_svrseq(), target);
  }

  // repeated string Commands = 4;
  for (int i = 0, n = this->_internal_commands_size(); i < n; i++) {
    const auto& s = this->_internal_commands(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.Command.Commands");
    target = stream->WriteString(4, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.Command)
  return target;
}

size_t Command::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.Command)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string Commands = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.commands_.size());
  for (int i = 0, n = _impl_.commands_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.commands_.Get(i));
  }

  // uint32 CliId = 1;
  if (this->_internal_cliid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_cliid());
  }

  // uint32 CliSeq = 2;
  if (this->_internal_cliseq() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_cliseq());
  }

  // uint32 SvrSeq = 3;
  if (this->_internal_svrseq() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_svrseq());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Command::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Command::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Command::GetClassData() const { return &_class_data_; }


void Command::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Command*>(&to_msg);
  auto& from = static_cast<const Command&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.Command)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.commands_.MergeFrom(from._impl_.commands_);
  if (from._internal_cliid() != 0) {
    _this->_internal_set_cliid(from._internal_cliid());
  }
  if (from._internal_cliseq() != 0) {
    _this->_internal_set_cliseq(from._internal_cliseq());
  }
  if (from._internal_svrseq() != 0) {
    _this->_internal_set_svrseq(from._internal_svrseq());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Command::CopyFrom(const Command& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.Command)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Command::IsInitialized() const {
  return true;
}

void Command::InternalSwap(Command* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.commands_.InternalSwap(&other->_impl_.commands_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Command, _impl_.svrseq_)
      + sizeof(Command::_impl_.svrseq_)
      - PROTOBUF_FIELD_OFFSET(Command, _impl_.cliid_)>(
          reinterpret_cast<char*>(&_impl_.cliid_),
          reinterpret_cast<char*>(&other->_impl_.cliid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Command::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[0]);
}

// ===================================================================

class ConsensusObj::_Internal {
 public:
};

ConsensusObj::ConsensusObj(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.ConsensusObj)
}
ConsensusObj::ConsensusObj(const ConsensusObj& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ConsensusObj* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.cliids_){from._impl_.cliids_}
    , /*decltype(_impl_._cliids_cached_byte_size_)*/{0}
    , decltype(_impl_.cliseqs_){from._impl_.cliseqs_}
    , /*decltype(_impl_._cliseqs_cached_byte_size_)*/{0}
    , decltype(_impl_.commands_){from._impl_.commands_}
    , decltype(_impl_.proid_){}
    , decltype(_impl_.proseq_){}
    , decltype(_impl_.svrseq_){}
    , decltype(_impl_.isnull_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.proid_, &from._impl_.proid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.isnull_) -
    reinterpret_cast<char*>(&_impl_.proid_)) + sizeof(_impl_.isnull_));
  // @@protoc_insertion_point(copy_constructor:message.ConsensusObj)
}

inline void ConsensusObj::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.cliids_){arena}
    , /*decltype(_impl_._cliids_cached_byte_size_)*/{0}
    , decltype(_impl_.cliseqs_){arena}
    , /*decltype(_impl_._cliseqs_cached_byte_size_)*/{0}
    , decltype(_impl_.commands_){arena}
    , decltype(_impl_.proid_){0u}
    , decltype(_impl_.proseq_){0u}
    , decltype(_impl_.svrseq_){0u}
    , decltype(_impl_.isnull_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ConsensusObj::~ConsensusObj() {
  // @@protoc_insertion_point(destructor:message.ConsensusObj)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ConsensusObj::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.cliids_.~RepeatedField();
  _impl_.cliseqs_.~RepeatedField();
  _impl_.commands_.~RepeatedPtrField();
}

void ConsensusObj::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ConsensusObj::Clear() {
// @@protoc_insertion_point(message_clear_start:message.ConsensusObj)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.cliids_.Clear();
  _impl_.cliseqs_.Clear();
  _impl_.commands_.Clear();
  ::memset(&_impl_.proid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.isnull_) -
      reinterpret_cast<char*>(&_impl_.proid_)) + sizeof(_impl_.isnull_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConsensusObj::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 ProId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.proid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 ProSeq = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.proseq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 SvrSeq = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.svrseq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool IsNull = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.isnull_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 CliIds = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_cliids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 40) {
          _internal_add_cliids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 CliSeqs = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_cliseqs(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 48) {
          _internal_add_cliseqs(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string Commands = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_commands();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "message.ConsensusObj.Commands"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConsensusObj::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.ConsensusObj)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 ProId = 1;
  if (this->_internal_proid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_proid(), target);
  }

  // uint32 ProSeq = 2;
  if (this->_internal_proseq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_proseq(), target);
  }

  // uint32 SvrSeq = 3;
  if (this->_internal_svrseq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_svrseq(), target);
  }

  // bool IsNull = 4;
  if (this->_internal_isnull() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_isnull(), target);
  }

  // repeated uint32 CliIds = 5;
  {
    int byte_size = _impl_._cliids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          5, _internal_cliids(), byte_size, target);
    }
  }

  // repeated uint32 CliSeqs = 6;
  {
    int byte_size = _impl_._cliseqs_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          6, _internal_cliseqs(), byte_size, target);
    }
  }

  // repeated string Commands = 7;
  for (int i = 0, n = this->_internal_commands_size(); i < n; i++) {
    const auto& s = this->_internal_commands(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.ConsensusObj.Commands");
    target = stream->WriteString(7, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.ConsensusObj)
  return target;
}

size_t ConsensusObj::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.ConsensusObj)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 CliIds = 5;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.cliids_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._cliids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 CliSeqs = 6;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.cliseqs_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._cliseqs_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated string Commands = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.commands_.size());
  for (int i = 0, n = _impl_.commands_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.commands_.Get(i));
  }

  // uint32 ProId = 1;
  if (this->_internal_proid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_proid());
  }

  // uint32 ProSeq = 2;
  if (this->_internal_proseq() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_proseq());
  }

  // uint32 SvrSeq = 3;
  if (this->_internal_svrseq() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_svrseq());
  }

  // bool IsNull = 4;
  if (this->_internal_isnull() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConsensusObj::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ConsensusObj::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConsensusObj::GetClassData() const { return &_class_data_; }


void ConsensusObj::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ConsensusObj*>(&to_msg);
  auto& from = static_cast<const ConsensusObj&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.ConsensusObj)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.cliids_.MergeFrom(from._impl_.cliids_);
  _this->_impl_.cliseqs_.MergeFrom(from._impl_.cliseqs_);
  _this->_impl_.commands_.MergeFrom(from._impl_.commands_);
  if (from._internal_proid() != 0) {
    _this->_internal_set_proid(from._internal_proid());
  }
  if (from._internal_proseq() != 0) {
    _this->_internal_set_proseq(from._internal_proseq());
  }
  if (from._internal_svrseq() != 0) {
    _this->_internal_set_svrseq(from._internal_svrseq());
  }
  if (from._internal_isnull() != 0) {
    _this->_internal_set_isnull(from._internal_isnull());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConsensusObj::CopyFrom(const ConsensusObj& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.ConsensusObj)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConsensusObj::IsInitialized() const {
  return true;
}

void ConsensusObj::InternalSwap(ConsensusObj* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.cliids_.InternalSwap(&other->_impl_.cliids_);
  _impl_.cliseqs_.InternalSwap(&other->_impl_.cliseqs_);
  _impl_.commands_.InternalSwap(&other->_impl_.commands_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConsensusObj, _impl_.isnull_)
      + sizeof(ConsensusObj::_impl_.isnull_)
      - PROTOBUF_FIELD_OFFSET(ConsensusObj, _impl_.proid_)>(
          reinterpret_cast<char*>(&_impl_.proid_),
          reinterpret_cast<char*>(&other->_impl_.proid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ConsensusObj::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[1]);
}

// ===================================================================

class Msg::_Internal {
 public:
  static const ::message::ConsensusObj& obj(const Msg* msg);
};

const ::message::ConsensusObj&
Msg::_Internal::obj(const Msg* msg) {
  return *msg->_impl_.obj_;
}
Msg::Msg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.Msg)
}
Msg::Msg(const Msg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Msg* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.obj_){nullptr}
    , decltype(_impl_.type_){}
    , decltype(_impl_.phase_){}
    , decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_obj()) {
    _this->_impl_.obj_ = new ::message::ConsensusObj(*from._impl_.obj_);
  }
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.value_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.value_));
  // @@protoc_insertion_point(copy_constructor:message.Msg)
}

inline void Msg::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.obj_){nullptr}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.phase_){0u}
    , decltype(_impl_.value_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Msg::~Msg() {
  // @@protoc_insertion_point(destructor:message.Msg)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Msg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.obj_;
}

void Msg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Msg::Clear() {
// @@protoc_insertion_point(message_clear_start:message.Msg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.obj_ != nullptr) {
    delete _impl_.obj_;
  }
  _impl_.obj_ = nullptr;
  ::memset(&_impl_.type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.value_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.value_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Msg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .message.MsgType Type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::message::MsgType>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 Phase = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.phase_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .message.ConsensusObj Obj = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_obj(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Msg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.Msg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .message.MsgType Type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // uint32 Phase = 2;
  if (this->_internal_phase() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_phase(), target);
  }

  // uint32 Value = 3;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_value(), target);
  }

  // .message.ConsensusObj Obj = 4;
  if (this->_internal_has_obj()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::obj(this),
        _Internal::obj(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.Msg)
  return target;
}

size_t Msg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.Msg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .message.ConsensusObj Obj = 4;
  if (this->_internal_has_obj()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.obj_);
  }

  // .message.MsgType Type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // uint32 Phase = 2;
  if (this->_internal_phase() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_phase());
  }

  // uint32 Value = 3;
  if (this->_internal_value() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Msg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Msg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Msg::GetClassData() const { return &_class_data_; }


void Msg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Msg*>(&to_msg);
  auto& from = static_cast<const Msg&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.Msg)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_obj()) {
    _this->_internal_mutable_obj()->::message::ConsensusObj::MergeFrom(
        from._internal_obj());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_phase() != 0) {
    _this->_internal_set_phase(from._internal_phase());
  }
  if (from._internal_value() != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Msg::CopyFrom(const Msg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.Msg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg::IsInitialized() const {
  return true;
}

void Msg::InternalSwap(Msg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Msg, _impl_.value_)
      + sizeof(Msg::_impl_.value_)
      - PROTOBUF_FIELD_OFFSET(Msg, _impl_.obj_)>(
          reinterpret_cast<char*>(&_impl_.obj_),
          reinterpret_cast<char*>(&other->_impl_.obj_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Msg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace message
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::message::Command*
Arena::CreateMaybeMessage< ::message::Command >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::Command >(arena);
}
template<> PROTOBUF_NOINLINE ::message::ConsensusObj*
Arena::CreateMaybeMessage< ::message::ConsensusObj >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::ConsensusObj >(arena);
}
template<> PROTOBUF_NOINLINE ::message::Msg*
Arena::CreateMaybeMessage< ::message::Msg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::Msg >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
